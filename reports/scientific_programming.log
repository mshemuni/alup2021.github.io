Traceback (most recent call last):
  File "C:\Users\mshem\anaconda3\envs\mshemuni.github.io\lib\site-packages\jupyter_cache\executors\utils.py", line 51, in single_nb_execution
    executenb(
  File "C:\Users\mshem\anaconda3\envs\mshemuni.github.io\lib\site-packages\nbclient\client.py", line 1117, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\mshem\anaconda3\envs\mshemuni.github.io\lib\site-packages\nbclient\util.py", line 78, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\Users\mshem\anaconda3\envs\mshemuni.github.io\lib\site-packages\nbclient\util.py", line 57, in just_run
    return loop.run_until_complete(coro)
  File "C:\Users\mshem\anaconda3\envs\mshemuni.github.io\lib\asyncio\base_events.py", line 642, in run_until_complete
    return future.result()
  File "C:\Users\mshem\anaconda3\envs\mshemuni.github.io\lib\site-packages\nbclient\client.py", line 558, in async_execute
    await self.async_execute_cell(
  File "C:\Users\mshem\anaconda3\envs\mshemuni.github.io\lib\site-packages\nbclient\client.py", line 862, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "C:\Users\mshem\anaconda3\envs\mshemuni.github.io\lib\site-packages\nbclient\client.py", line 765, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from astropy import units

t = 25 * units.imperial.deg_F
t.to(units.K)
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mUnitConversionError[0m                       Traceback (most recent call last)
[1;32m~\AppData\Local\Temp/ipykernel_9468/3749233363.py[0m in [0;36m<module>[1;34m[0m
[0;32m      2[0m [1;33m[0m[0m
[0;32m      3[0m [0mt[0m [1;33m=[0m [1;36m25[0m [1;33m*[0m [0munits[0m[1;33m.[0m[0mimperial[0m[1;33m.[0m[0mdeg_F[0m[1;33m[0m[1;33m[0m[0m
[1;32m----> 4[1;33m [0mt[0m[1;33m.[0m[0mto[0m[1;33m([0m[0munits[0m[1;33m.[0m[0mK[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m
[1;32m~\anaconda3\envs\mshemuni.github.io\lib\site-packages\astropy\units\quantity.py[0m in [0;36mto[1;34m(self, unit, equivalencies, copy)[0m
[0;32m    703[0m             [1;31m# Avoid using to_value to ensure that we make a copy. We also[0m[1;33m[0m[1;33m[0m[1;33m[0m[0m
[0;32m    704[0m             [1;31m# don't want to slow down this method (esp. the scalar case).[0m[1;33m[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 705[1;33m             [0mvalue[0m [1;33m=[0m [0mself[0m[1;33m.[0m[0m_to_value[0m[1;33m([0m[0munit[0m[1;33m,[0m [0mequivalencies[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    706[0m         [1;32melse[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    707[0m             [1;31m# to_value only copies if necessary[0m[1;33m[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\anaconda3\envs\mshemuni.github.io\lib\site-packages\astropy\units\quantity.py[0m in [0;36m_to_value[1;34m(self, unit, equivalencies)[0m
[0;32m    667[0m         [1;32mif[0m [0mequivalencies[0m [1;33m==[0m [1;33m[[0m[1;33m][0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    668[0m             [0mequivalencies[0m [1;33m=[0m [0mself[0m[1;33m.[0m[0m_equivalencies[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 669[1;33m         return self.unit.to(unit, self.view(np.ndarray),
[0m[0;32m    670[0m                             equivalencies=equivalencies)
[0;32m    671[0m [1;33m[0m[0m

[1;32m~\anaconda3\envs\mshemuni.github.io\lib\site-packages\astropy\units\core.py[0m in [0;36mto[1;34m(self, other, value, equivalencies)[0m
[0;32m   1131[0m             [1;32mreturn[0m [0mUNITY[0m[1;33m[0m[1;33m[0m[0m
[0;32m   1132[0m         [1;32melse[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[1;32m-> 1133[1;33m             return self._get_converter(Unit(other),
[0m[0;32m   1134[0m                                        equivalencies=equivalencies)(value)
[0;32m   1135[0m [1;33m[0m[0m

[1;32m~\anaconda3\envs\mshemuni.github.io\lib\site-packages\astropy\units\core.py[0m in [0;36m_get_converter[1;34m(self, other, equivalencies)[0m
[0;32m   1062[0m                             [1;32mpass[0m[1;33m[0m[1;33m[0m[0m
[0;32m   1063[0m [1;33m[0m[0m
[1;32m-> 1064[1;33m             [1;32mraise[0m [0mexc[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m   1065[0m [1;33m[0m[0m
[0;32m   1066[0m     [1;32mdef[0m [0m_to[0m[1;33m([0m[0mself[0m[1;33m,[0m [0mother[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\anaconda3\envs\mshemuni.github.io\lib\site-packages\astropy\units\core.py[0m in [0;36m_get_converter[1;34m(self, other, equivalencies)[0m
[0;32m   1047[0m         [1;31m# if that doesn't work, maybe we can do it with equivalencies?[0m[1;33m[0m[1;33m[0m[1;33m[0m[0m
[0;32m   1048[0m         [1;32mtry[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[1;32m-> 1049[1;33m             return self._apply_equivalencies(
[0m[0;32m   1050[0m                 self, other, self._normalize_equivalencies(equivalencies))
[0;32m   1051[0m         [1;32mexcept[0m [0mUnitsError[0m [1;32mas[0m [0mexc[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\anaconda3\envs\mshemuni.github.io\lib\site-packages\astropy\units\core.py[0m in [0;36m_apply_equivalencies[1;34m(self, unit, other, equivalencies)[0m
[0;32m   1023[0m         [0mother_str[0m [1;33m=[0m [0mget_err_str[0m[1;33m([0m[0mother[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m   1024[0m [1;33m[0m[0m
[1;32m-> 1025[1;33m         raise UnitConversionError(
[0m[0;32m   1026[0m             f"{unit_str} and {other_str} are not convertible")
[0;32m   1027[0m [1;33m[0m[0m

[1;31mUnitConversionError[0m: 'deg_F' (temperature) and 'K' (temperature) are not convertible
UnitConversionError: 'deg_F' (temperature) and 'K' (temperature) are not convertible

